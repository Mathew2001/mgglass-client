{"version":3,"file":"static/js/252.18a75736.chunk.js","mappings":"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","sources":["components/meklahon/MeklahonByName.jsx","components/LinkPaths.jsx","components/meklahon/MeklahonCard.jsx"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getMeklahonCatByName } from '../../redux/actions/mecklahons/mecklahonCatActions'\r\nimport MeklahonCard from './MeklahonCard'\r\nimport { getMeklahonByCatId } from '../../redux/actions/mecklahons/mecklahonActions'\r\nimport ROUTES from '../../const'\r\nimport LinkPaths from '../LinkPaths'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst MeklahonByName = () => {\r\n  const { name } = useParams()\r\n  const { mecklahonCat , loading : catLoading,error: catError  } = useSelector(state => state.mecklahonCatReducer)\r\n  const { mecklahonsByCatId , loading : mecklahonLoading,error: mecklahonError } = useSelector(state => state.mecklahonReducer)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    if(!name) return;\r\n    dispatch(getMeklahonCatByName(name))\r\n  }, [dispatch, name])\r\n\r\n  useEffect(() => {\r\n    if(mecklahonCat?._id){\r\n    dispatch(getMeklahonByCatId(mecklahonCat?._id))\r\n    }\r\n  }, [dispatch, mecklahonCat?._id])\r\n\r\n  if(catLoading || mecklahonLoading){\r\n    return <div className=\"container py-5\">\r\n      <div className=\"row\">\r\n        <div className=\"col-12\">\r\n          <h1 className=\"display-4 text-center mb-5\">Loading...</h1>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  }\r\n\r\n  if(catError || mecklahonError){\r\n    return <div className=\"container py-5\">\r\n      <div className=\"row\">\r\n        <div className=\"col-12\">\r\n          <h1 className=\"display-4 text-center mb-5\">Error...</h1>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  }\r\n\r\n  if(!mecklahonCat || !mecklahonsByCatId){\r\n    return <div className=\"container py-5\">\r\n      <div className=\"row\">\r\n        <div className=\"col-12\">\r\n          <h1 className=\"display-4 text-center mb-5\">No data found...</h1>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <div className=\"container py-4 mt-4\" dir=\"rtl\">\r\n      <div className=\"mt-4 mb-4\">\r\n        <h1 className=\"text-center\">{mecklahonCat.name}</h1>\r\n        <LinkPaths pathString={`דף הבית / מקלחונים / ${mecklahonCat.name}`} routeMap={{ \"דף הבית\": ROUTES.HOME, \"מקלחונים\": ROUTES.MECKLAHONS, [mecklahonCat.name]: ROUTES.MECKLAHON_BY_CAT}} />\r\n      </div>\r\n      <div className='row row-cols-2 row-cols-lg-4 g-4'>\r\n        {mecklahonsByCatId && mecklahonsByCatId.map((mecklahon) => (\r\n          <MeklahonCard key={mecklahon._id} name={mecklahon.name} description={mecklahon.description} imageGallery={mecklahon.imageGallery} id={mecklahon._id} link={`${ROUTES.MECKLAHONS}/${mecklahonCat.name}/${mecklahon.name}`} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MeklahonByName","// Breadcrumbs.jsx\r\nimport { Link } from \"react-router-dom\";\r\n\r\n/**\r\n * Props:\r\n * - pathString: a string like \"דף הבית / פרגולות / הצללה\"\r\n * - routeMap: { [label]: path } e.g. { \"דף הבית\": ROUTES.HOME, \"פרגולות\": \"/pergolas\" }\r\n * - separator: what to display between items (default \" / \")\r\n * - wrapClass: extra classes for the outer div (Bootstrap-friendly)\r\n */\r\nfunction LinkPaths({\r\n  pathString,\r\n  routeMap = {},\r\n  separator = \" / \",\r\n  wrapClass = \"\"\r\n}) {\r\n  // Split by \"/\" (not spaces), trim, and remove empties\r\n  const parts = String(pathString || \"\")\r\n    .split(\"/\")\r\n    .map(s => s.trim())\r\n    .filter(Boolean);\r\n\r\n  return (\r\n    <div className={`col-12 text-center text-warning ${wrapClass}`}>\r\n      <p className=\"text-center m-0\">\r\n        {parts.map((label, idx) => {\r\n          const isLast = idx === parts.length - 1;\r\n          const to = routeMap[label]; // optional mapping label -> route\r\n          return (\r\n            <>\r\n            <span key={idx}>\r\n              {isLast || !to ? (\r\n                // last item (active) or no route -> plain bold text\r\n                <span className=\"text-warning fw-bold\">{label}</span>\r\n              ) : (\r\n                <Link to={to} className=\"text-muted text-decoration-none\">\r\n                  {label}\r\n                </Link>\r\n              )}\r\n              {!isLast && <span>{separator}</span>}\r\n            </span>\r\n            </>\r\n          );\r\n        })}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LinkPaths","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst MeklahonCard = ({name, description, imageGallery, id , link}) => {\r\n  const [currentImageIndex, setCurrentImageIndex] = useState(0)\r\n  \r\n  const nextImage = (e) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    setCurrentImageIndex((prevIndex) => \r\n      prevIndex === imageGallery.length - 1 ? 0 : prevIndex + 1\r\n    )\r\n  }\r\n\r\n  const previousImage = (e) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    setCurrentImageIndex((prevIndex) => \r\n      prevIndex === 0 ? imageGallery.length - 1 : prevIndex - 1\r\n    )\r\n  }\r\n  \r\n  return (\r\n    <div className=\"col\" >\r\n      <div className=\"card h-100\">\r\n      <Link key={id} to={link} style={{ textDecoration: 'none', color: 'inherit' }}>\r\n      <div className=\"card-body\">\r\n        <h1 className=\"card-title h4 mb-3\">{name}</h1>\r\n      </div>\r\n      {/* <div className=\"position-relative\" style={{height: '250px'}}>\r\n        <img \r\n          src={imageGallery[currentImageIndex]}\r\n          alt={name}\r\n          className=\"w-100 h-100\"\r\n          style={{objectFit: 'cover'}}\r\n        />\r\n        {imageGallery.length > 1 && (\r\n          <>\r\n            <button \r\n              className=\"btn btn-light position-absolute top-50 start-0 translate-middle-y ms-2\" \r\n              onClick={previousImage}\r\n              style={{opacity: 0.8, fontSize: '24px', zIndex: 2}}\r\n            >\r\n              &#8250;\r\n            </button>\r\n            <button \r\n              className=\"btn btn-light position-absolute top-50 end-0 translate-middle-y me-2\" \r\n              onClick={nextImage}\r\n              style={{opacity: 0.8, fontSize: '24px', zIndex: 2}}\r\n            >\r\n              &#8249;\r\n            </button>\r\n          </>\r\n        )}\r\n      </div> */}\r\n        <div id=\"carouselExample\" className=\"carousel slide\">\r\n          <div className=\"carousel-inner\">\r\n            {imageGallery.map((image, index) => (\r\n              <div key={index} className={`carousel-item ${index === currentImageIndex ? 'active' : ''}`}>\r\n                <img src={image} className=\"d-block w-100\" alt={name} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n          {imageGallery.length > 1 && (\r\n            <>\r\n          <button className=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#carouselExample\" data-bs-slide=\"prev\" onClick={previousImage}>\r\n            <i className=\"bi bi-arrow-left-circle-fill fs-3 text-dark\"></i>\r\n            <span className=\"visually-hidden\">Previous</span>\r\n          </button>\r\n            <button className=\"carousel-control-next\" type=\"button\" data-bs-target=\"#carouselExample\" data-bs-slide=\"next\" onClick={nextImage}>\r\n              <i className=\"bi bi-arrow-right-circle-fill fs-3 text-dark\"></i>\r\n              <span className=\"visually-hidden\">Next</span>\r\n            </button>\r\n          </>\r\n          )}\r\n        </div>\r\n      <div className=\"card-body\">\r\n        <p className=\"card-text text-muted mb-0\" style={{fontSize: '1.1rem'}}>{description}</p>\r\n        </div>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MeklahonCard"],"names":["MeklahonByName","name","useParams","mecklahonCat","loading","catLoading","error","catError","useSelector","state","mecklahonCatReducer","mecklahonsByCatId","mecklahonLoading","mecklahonError","mecklahonReducer","dispatch","useDispatch","useEffect","getMeklahonCatByName","_id","getMeklahonByCatId","_jsx","className","children","_Fragment","_jsxs","dir","LinkPaths","pathString","concat","routeMap","ROUTES","HOME","MECKLAHONS","MECKLAHON_BY_CAT","map","mecklahon","MeklahonCard","description","imageGallery","id","link","_ref","separator","wrapClass","parts","String","split","s","trim","filter","Boolean","label","idx","isLast","length","to","Link","currentImageIndex","setCurrentImageIndex","useState","style","textDecoration","color","image","index","src","alt","type","onClick","e","preventDefault","stopPropagation","prevIndex","fontSize"],"sourceRoot":""}